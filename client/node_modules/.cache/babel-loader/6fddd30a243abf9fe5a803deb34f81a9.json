{"ast":null,"code":"var _jsxFileName = \"C:\\\\React_Course\\\\bell-clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux'; // import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // state = {\n  //     loading: true\n  // };\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collections');\n    // collectionRef.get().then(snapshot => { \n    //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //    updateCollections(collectionsMap);\n    //    this.setState({loading: false});\n    // });\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching,\n      isCollectionsLoaded\n    } = this.props; // const { loading } = this.state;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !isCollectionsLoaded\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 20\n      }\n    }));\n  }\n\n}\n\n;\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(null, mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["C:/React_Course/bell-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","createStructuredSelector","connect","fetchCollectionsStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","WithSpinner","CollectionsOverview","CollectionPage","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","isCollectionsLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAsE,iCAAtE;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,MAAMC,6BAA6B,GAAGH,WAAW,CAACC,mBAAD,CAAjD;AACA,MAAMG,yBAAyB,GAAGJ,WAAW,CAACE,cAAD,CAA7C;;AAEA,MAAMG,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AACnC;AACA;AACA;AAEA;AAEAC,EAAAA,iBAAiB,GAAG;AAChB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,UAAM;AAAEV,MAAAA;AAAF,QAAiC,KAAKW,KAA5C;AACAX,IAAAA,0BAA0B;AAC7B;;AAEDY,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,oBAAT;AAA+BC,MAAAA;AAA/B,QAAuD,KAAKJ,KAAlE,CADK,CAEL;;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACO,oBAAC,KAAD;AACA,MAAA,KAAK,MADL;AACM,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,EAD1B;AAEA,MAAA,MAAM,EAAEL,KAAK,iBACZ,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAEG;AAA1C,SAAoEH,KAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADP,eAOO,oBAAC,KAAD;AACA,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,gBADpB;AAEA,MAAA,MAAM,EAAEL,KAAK,iBACZ,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAE,CAACI;AAAvC,SAAgEJ,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPP,CADJ;AAgBH;;AAvCkC;;AAwCtC;AAED,MAAMM,eAAe,GAAGnB,wBAAwB,CAAC;AAC7CgB,EAAAA,oBAAoB,EAAEb,0BADuB;AAE7Cc,EAAAA,mBAAmB,EAAEb;AAFwB,CAAD,CAAhD;;AAKA,MAAMgB,kBAAkB,GAAGC,QAAQ,KAAK;AACpC;AACAnB,EAAAA,0BAA0B,EAAE,MAAMmB,QAAQ,CAACnB,0BAA0B,EAA3B;AAFN,CAAL,CAAnC;;AAKA,eAAeD,OAAO,CAAC,IAAD,EAAOkB,eAAP,EAAwBC,kBAAxB,CAAP,CAAmDV,QAAnD,CAAf","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\n// import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\r\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPage from '../collection/collection.component';\r\n\r\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component {\r\n    // state = {\r\n    //     loading: true\r\n    // };\r\n\r\n    // unsubscribeFromSnapshot = null;\r\n\r\n    componentDidMount() {\r\n        // const { updateCollections } = this.props;\r\n        // const collectionRef = firestore.collection('collections');\r\n       \r\n        // collectionRef.get().then(snapshot => { \r\n        //    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        //    updateCollections(collectionsMap);\r\n        //    this.setState({loading: false});\r\n        // });\r\n        const { fetchCollectionsStartAsync } = this.props;\r\n        fetchCollectionsStartAsync();\r\n    }\r\n\r\n    render() {\r\n        const { match, isCollectionFetching, isCollectionsLoaded } = this.props;\r\n        // const { loading } = this.state;\r\n        return (\r\n            <div className='shop-page'>\r\n                   <Route \r\n                   exact path={`${match.path}`} \r\n                   render={props => ( \r\n                    <CollectionOverviewWithSpinner isLoading={isCollectionFetching} {...props} />\r\n                   )}\r\n                   />\r\n                   <Route \r\n                   path={`${match.path}/:collectionId`} \r\n                   render={props => (\r\n                    <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props}/>\r\n                   )}\r\n                   />\r\n             </div>\r\n         );\r\n    }\r\n}; \r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    isCollectionFetching: selectIsCollectionFetching,\r\n    isCollectionsLoaded: selectIsCollectionsLoaded\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\r\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\r\n});\r\n\r\nexport default connect(null, mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}